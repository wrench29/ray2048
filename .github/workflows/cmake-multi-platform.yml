# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false

      matrix:
        vcpkgCommitId: ['943c5ef1c8f6b5e6ced092b242c8299caae2ff01']
        platform_type: ['linux', 'windows']
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl
          - os: windows-latest
            platform_type: 'linux'
          - os: ubuntu-latest
            platform_type: 'windows'

    steps:
    - name: Install Linux dependencies
      if: matrix.platform_type == 'linux'
      run: |
        sudo apt update && sudo apt install libxinerama-dev libxcursor-dev xorg-dev libglu1-mesa-dev pkg-config zip
    
    - uses: actions/checkout@v4
    
    - uses: lukka/get-cmake@latest

    - name: Setup new vcpkg
      uses: lukka/run-vcpkg@v11
      with:
        vcpkgDirectory: '${{ github.workspace }}/vcpkg'
        vcpkgGitCommitId: '${{ matrix.vcpkgCommitId }}'
    
    - name: Run CMake
      uses: lukka/run-cmake@v10
      with:
        configurePreset: 'x64-release-${{ matrix.platform_type }}'
        configurePresetAdditionalArgs: "['-DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}', '-DCMAKE_C_COMPILER=${{ matrix.c_compiler }}', '-DCMAKE_BUILD_TYPE=${{ matrix.build_type }}']"
        buildPresetAdditionalArgs: "['--config Release']"

    - name: Create Windows artifact
      if: matrix.platform_type == 'windows'
      run: |
        mkdir release;
        cp ./out/build/x64-release-windows/2048_with_raylib/2048_with_raylib.exe release/;
        cp ./out/build/x64-release-windows/2048_with_raylib/raylib.dll release/;
        Compress-Archive -Path release/* -DestinationPath ray2048.windows.zip

    - name: Create Linux artifact
      if: matrix.platform_type == 'linux'
      run: |
        mkdir release &&
        cp ./out/build/x64-release-linux/2048_with_raylib/2048_with_raylib.exe release/ &&
        cp ./out/build/x64-release-linux/2048_with_raylib/raylib.dll release/ &&
        zip ray2048.linux.zip release/*

    - name: Upload artifact
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./ray2048.${{ matrix.platform_type }}.zip
        asset_name: ray2048.${{ matrix.platform_type }}.zip
        asset_content_type: application/x-zip
