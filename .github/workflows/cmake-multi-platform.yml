name: CMake on multiple platforms

on:
  push:
    tags: '*'

jobs:
  release:
    permissions: write-all
    runs-on: ubuntu-latest
    steps:
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1.0.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
    - name: Output Release URL File
      run: echo "${{ steps.create_release.outputs.upload_url }}" > release_url.txt
    - name: Save Release URL File for publish
      uses: actions/upload-artifact@v1
      with:
        name: release_url
        path: release_url.txt
  
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false

      matrix:
        vcpkgCommitId: ['943c5ef1c8f6b5e6ced092b242c8299caae2ff01']
        platform_type: ['linux', 'windows']
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl
          - os: windows-latest
            platform_type: 'linux'
          - os: ubuntu-latest
            platform_type: 'windows'

    steps:
    - name: Install Linux dependencies
      if: matrix.platform_type == 'linux'
      run: |
        sudo apt update && sudo apt install libxinerama-dev libxcursor-dev xorg-dev libglu1-mesa-dev pkg-config zip
    
    - uses: actions/checkout@v4
    
    - uses: lukka/get-cmake@latest

    - name: Setup new vcpkg
      uses: lukka/run-vcpkg@v11
      with:
        vcpkgDirectory: '${{ github.workspace }}/vcpkg'
        vcpkgGitCommitId: '${{ matrix.vcpkgCommitId }}'
    
    - name: Run CMake
      uses: lukka/run-cmake@v10
      with:
        configurePreset: 'x64-release-${{ matrix.platform_type }}'
        configurePresetAdditionalArgs: "['-DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}', '-DCMAKE_C_COMPILER=${{ matrix.c_compiler }}', '-DCMAKE_BUILD_TYPE=${{ matrix.build_type }}']"
        buildPresetAdditionalArgs: "['--config Release']"
    
    - name: Run CMake build
      uses: lukka/run-cmake@v10
      with:
        configurePreset: 'x64-release-${{ matrix.platform_type }}'
        configurePresetAdditionalArgs: "['-DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}', '-DCMAKE_C_COMPILER=${{ matrix.c_compiler }}', '-DCMAKE_BUILD_TYPE=${{ matrix.build_type }}']"
        buildPreset: 'build-x64-release-${{ matrix.platform_type }}'

    - name: Create Windows artifact
      if: matrix.platform_type == 'windows'
      run: |
        mkdir release;
        cp ./out/build/x64-release-windows/game_2048/game_2048.exe release/;
        cp ./out/build/x64-release-windows/game_2048/raylib.dll release/;
        Compress-Archive -Path release/* -DestinationPath ray2048.windows.zip

    - name: Create Linux artifact
      if: matrix.platform_type == 'linux'
      run: |
        mkdir release &&
        cp ./out/build/x64-release-linux/game_2048/game_2048 release/ &&
        zip ray2048.linux.zip release/*

    - name: Load Release URL File from release job
      uses: actions/download-artifact@v1
      with:
        name: release_url

    - name: Get Release File Name & Upload URL
      id: get_release_info
      run: |
        echo ::set-output name=file_name::${REPOSITORY_NAME##*/}-${TAG_REF_NAME##*/v} # RepositoryName-v1.0.0
        value=`cat release_url/release_url.txt`
        echo ::set-output name=upload_url::$value
      env:
        TAG_REF_NAME: ${{ github.ref }}
        REPOSITORY_NAME: ${{ github.repository }}

    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./ray2048.${{ matrix.platform_type }}.zip
        asset_name: ray2048.${{ matrix.platform_type }}.zip
        asset_content_type: application/x-zip
